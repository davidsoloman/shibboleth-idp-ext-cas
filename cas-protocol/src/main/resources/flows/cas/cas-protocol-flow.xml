<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
  ~ Licensed to the University Corporation for Advanced Internet Development,
  ~ Inc. (UCAID) under one or more contributor license agreements.  See the
  ~ NOTICE file distributed with this work for additional information regarding
  ~ copyright ownership. The UCAID licenses this file to You under the Apache
  ~ License, Version 2.0 (the "License"); you may not use this file except in
  ~ compliance with the License.  You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<flow xmlns="http://www.springframework.org/schema/webflow" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <on-start>
        <evaluate expression="initProfileRequestContext"/>
    </on-start>

    <action-state id="dispatchProtocol">
        <evaluate expression="dispatchProtocolAction" />
        <transition on="login" to="initializeLogin"/>
        <!--<transition on="validate" to="initializeValidate"/>-->
        <transition on="serviceValidate" to="initializeValidate"/>
        <!--<transition on="proxy" to="initializeProxy"/>-->
        <!--<transition on="proxyValidate" to="initializeValidate"/>-->
        <transition on="unknownProtocolUri" to="error" />
    </action-state>

    <action-state id="initializeLogin">
        <evaluate expression="initializeLoginAction" />
        <transition on="proceed" to="checkAuthenticationRequired" />
    </action-state>

    <action-state id="checkAuthenticationRequired">
        <evaluate expression="checkAuthenticationRequiredAction"/>
        <transition on="sessionNotFound" to="buildAuthenticationContext" />
        <transition on="sessionFound" to="grantServiceTicket" />
        <transition on="renewRequested" to="buildAuthenticationContext" />
        <transition on="gatewayRequested" to="gatewayRedirect" />
    </action-state>

    <action-state id="buildAuthenticationContext">
        <evaluate expression="buildAuthenticationContextAction"/>
        <transition on="proceed" to="authenticate" />
    </action-state>

    <subflow-state id="authenticate" subflow="Authentication">
        <transition on="proceed" to="grantServiceTicket" />
    </subflow-state>

    <action-state id="grantServiceTicket">
        <evaluate expression="grantServiceTicketAction" />
        <transition on="success" to="redirectToService" />
        <transition on="failure" to="error" />
    </action-state>

    <action-state id="initializeValidate">
        <evaluate expression="initializeValidateAction" />
        <transition on="serviceNotSpecified" to="serviceValidateFailure" />
        <transition on="ticketNotSpecified" to="serviceValidateFailure" />
        <transition on="proceed" to="validateServiceTicket" />
    </action-state>

    <action-state id="validateServiceTicket">
        <evaluate expression="validateServiceTicketAction" />
        <transition on="serviceMismatch" to="serviceValidateFailure" />
        <transition on="sessionExpired" to="serviceValidateFailure" />
        <transition on="sessionMismatch" to="serviceValidateFailure" />
        <transition on="ticketExpired" to="serviceValidateFailure" />
        <transition on="ticketNotFromRenew" to="serviceValidateFailure" />
        <transition on="ticketRetrievalError" to="serviceValidateFailure" />
        <transition on="success" to="serviceValidateSuccess" />
    </action-state>

    <!-- Redirect end states -->
    <end-state id="redirectToService" view="externalRedirect:#{requestScope.serviceTicketResponse.redirectUrl}" />
    <end-state id="gatewayRedirect" view="externalRedirect:#{requestScope.serviceTicketRequest.service}" />

    <!-- View end states -->
    <end-state id="serviceValidateSuccess" view="serviceValidateSuccess">
        <on-entry>
            <set name="flashScope.username" value="requestScope.serviceTicketValidationResponse.username" />
            <set name="flashScope.pgtIou" value="requestScope.serviceTicketValidationResponse.pgtIou" />
        </on-entry>
    </end-state>
    <end-state id="serviceValidateFailure" view="serviceValidateFailure">
        <on-entry>
            <set name="flashScope.code" value="currentEvent.attributes.code" />
            <set name="flashScope.detailCode" value="currentEvent.attributes.detailCode" />
        </on-entry>
    </end-state>

    <!-- Error end states -->
    <end-state id="error" view="profileErrorView" />

    <global-transitions>
        <transition on="error" to="error" />
        <transition on="IdentitySwitch" to="error" />
        <transition on="InputOutputError" to="error" />
        <transition on="InvalidCredentials" to="error" />
        <transition on="InvalidProfileContext" to="error" />
        <transition on="NoCredentials" to="error" />
        <transition on="NoPotentialFlow" to="error" />
        <transition on="RequestUnsupported" to="error" />
        <transition on="SubjectCanonicalizationError" to="error" />
    </global-transitions>

    <bean-import resource="/conf/cas-protocol-beans.xml" />

</flow>